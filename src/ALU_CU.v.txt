module RS_FF (
  input R,
  input S,
  output Q,
  output nQ 
);
  wire nQ_temp ;
  wire Q_temp;
  assign Q_temp = ~ (R | nQ_temp );
  assign nQ_temp  = ~ (Q_temp | S);
  assign Q = Q_temp;
  assign nQ  = nQ_temp ;
endmodule

module DIG_JK_FF_AS
#(
    parameter Default = 1'b0
)
(
   input Set,
   input J,
   input C,
   input K,
   input Clr,
   output Q,
   output nQ
);
    reg state;

    assign Q = state;
    assign nQ = ~state;

    always @ (posedge C or posedge Clr or posedge Set) begin
        if (Set)
            state <= 1'b1;
        else if (Clr)
            state <= 1'b0;
        else if (~J & K)
            state <= 1'b0;
        else if (J & ~K)
            state <= 1'b1;
        else if (J & K)
            state <= ~state;
    end

    initial begin
        state = Default;
    end
endmodule

module counter3 (
  input CNT,
  input CLK,
  input RST,
  output [2:0] OUT
);
  wire s0;
  wire s1;
  wire s2;
  wire RST_N;
  wire s3;
  wire s4;
  DIG_JK_FF_AS #(
    .Default(0)
  )
  DIG_JK_FF_AS_i0 (
    .Set( 1'b0 ),
    .J( CNT ),
    .C( CLK ),
    .K( CNT ),
    .Clr( RST_N ),
    .Q( s0 ),
    .nQ ( s3 )
  );
  DIG_JK_FF_AS #(
    .Default(0)
  )
  DIG_JK_FF_AS_i1 (
    .Set( 1'b0 ),
    .J( CNT ),
    .C( s3 ),
    .K( CNT ),
    .Clr( RST_N ),
    .Q( s1 ),
    .nQ ( s4 )
  );
  DIG_JK_FF_AS #(
    .Default(0)
  )
  DIG_JK_FF_AS_i2 (
    .Set( 1'b0 ),
    .J( CNT ),
    .C( s4 ),
    .K( CNT ),
    .Clr( RST_N ),
    .Q( s2 )
  );
  assign RST_N = ((s2 & s1 & ~s0) | RST);
  assign OUT[0] = s0;
  assign OUT[1] = s1;
  assign OUT[2] = s2;
endmodule

module Dec3to5 (
  input [2:0]sel,
  output O0,
  output O1,
  output O2,
  output O3,
  output O4,
  output O5
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  assign s3 = sel[0];
  assign s4 = sel[1];
  assign s5 = sel[2];
  assign s2 = ~ s5;
  assign s1 = ~ s4;
  assign s0 = ~ s3;
  assign O0 = (s0 & s1 & s2);
  assign O1 = (s2 & s1 & s3);
  assign O2 = (s2 & s4 & s0);
  assign O3 = (s2 & s4 & s3);
  assign O4 = (s5 & s1 & s0);
  assign O5 = (s5 & s1 & s3);
endmodule

module sequnceCNTmod (
  input CLK,
  input BGN,
  input RST,
  input END ,
  output fi0 ,
  output fi1 ,
  output fi2 ,
  output fi3 ,
  output fi4 ,
  output fi5 
);
  wire s0;
  wire s1;
  wire [2:0] s2;
  RS_FF RS_FF_i0 (
    .R( END  ),
    .S( BGN ),
    .Q( s0 )
  );
  assign s1 = (s0 & RST);
  counter3 counter3_i1 (
    .CNT( s0 ),
    .CLK( CLK ),
    .RST( s1 ),
    .OUT( s2 )
  );
  Dec3to5 Dec3to5_i2 (
    .sel( s2 ),
    .O0( fi0  ),
    .O1( fi1  ),
    .O2( fi2  ),
    .O3( fi3  ),
    .O4( fi4  ),
    .O5( fi5  )
  );
endmodule

 module ALU_CU (
  input BGN,
  input RST,
  input CLK,
  input CNT7,
  input Q0,
  input Q_1 ,
  input A7,
  input [1:0] OP,
  output c0,
  output c0_prim ,
  output c1,
  output c2,
  output c3,
  output c4,
  output cR,
  output cL,
  output c5,
  output c7,
  output c8,
  output c6,
  output c7_5 
);
  wire END ;
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s_C2;
  wire s8;
  wire s9;
  wire C3;
  wire s10;
  wire s11;
  wire s12;
  wire s13;
  wire adun;
  wire scad;
  wire s14;
  wire c3_temp;
  wire s15;
  wire c8_temp;
  wire s16;
  wire s17;
  assign s10 = OP[0];
  assign s11 = OP[1];
  assign s12 = (~ s10 & s11);
  assign s13 = (s10 & s11);
  assign adun = (~ s10 & ~ s11);
  assign scad = (s10 & ~ s11);
  sequnceCNTmod sequnceCNTmod_i0 (
    .CLK( CLK ),
    .BGN( BGN ),
    .RST( RST ),
    .END ( END  ),
    .fi0 ( s0 ),
    .fi1 ( s1 ),
    .fi2 ( s2 ),
    .fi3 ( s3 ),
    .fi4 ( s4 ),
    .fi5 ( s5 )
  );
  assign c0 = (s12 & s0 & s14);
  assign c0_prim  = (s0 & ~ s12 & s14);
  assign c1 = (s14 & (s13 | s12) & s1);
   assign c3_temp = (((adun | scad) & s3) | (s12 & (Q0 ^ Q_1 ) & s0 & s_C2) | (s_C2 & s13 & s3 & A7) | (A7 & C3 & s13 & s0) | (s_C2 & s1 & s13));
   assign c4 = ((c3_temp & scad) | (c3_temp & s12 & Q0 & ~ Q_1 ) | (c3_temp & s1 & s13));
  assign cR = (s12 & s_C2 & ~ CNT7 & s1);
  assign cL = (s13 & s0 & s_C2);
  assign c5 = (s13 & s2 & s_C2);
  assign c7 = (C3 & (adun | (s12 & s0) | (s1 & s13) | scad));
  assign c6 = ((s12 & s2 & ~ CNT7 & s_C2) | (s13 & s4 & ~ CNT7 & s_C2));
  assign c7_5  = (s12 & s1 & C3);
  assign s9 = (((scad | adun) & s5) | (s5 & CNT7));
  assign s16 = (RST | s7);
  assign s6 = (RST | s9);
   assign s8 = (END  | RST);
   assign s17 = (~ s_C2 & ~ C3 & ~ END  & ~ (s5 & BGN));
  RS_FF RS_FF_i1 (
    .R( RST ),
    .S( s15 ),
    .Q( c8_temp )
  );
  RS_FF RS_FF_i2 (
    .R( s8 ),
    .S( s9 ),
    .Q( C3 )
  );
  assign END = c8_temp;
  RS_FF RS_FF_i3 (
    .R( s16 ),
    .S( s17 ),
    .Q( s14 )
  );
  assign c2 = (s14 & s2);
  assign s7 = (s5 & s14);
  assign s15 = (s2 & C3);
  RS_FF RS_FF_i4 (
    .R( s6 ),
    .S( s7 ),
    .Q( s_C2 )
  );
  assign c3 = c3_temp;
  assign c8 = c8_temp;
endmodule
